
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__callmanager_glue_h__ADAPTOR_MARSHAL_H
#define __dbusxx__callmanager_glue_h__ADAPTOR_MARSHAL_H

#include <dbus-c++/dbus.h>
#include <cassert>

namespace org {
namespace sflphone {
namespace SFLphone {

class CallManager_adaptor
: public ::DBus::InterfaceAdaptor
{
public:

    CallManager_adaptor()
    : ::DBus::InterfaceAdaptor("org.sflphone.SFLphone.CallManager")
    {
        register_method(CallManager_adaptor, placeCall, _placeCall_stub);
        register_method(CallManager_adaptor, placeCallFirstAccount, _placeCallFirstAccount_stub);
        register_method(CallManager_adaptor, refuse, _refuse_stub);
        register_method(CallManager_adaptor, accept, _accept_stub);
        register_method(CallManager_adaptor, hangUp, _hangUp_stub);
        register_method(CallManager_adaptor, hangUpConference, _hangUpConference_stub);
        register_method(CallManager_adaptor, hold, _hold_stub);
        register_method(CallManager_adaptor, unhold, _unhold_stub);
        register_method(CallManager_adaptor, transfer, _transfer_stub);
        register_method(CallManager_adaptor, attendedTransfer, _attendedTransfer_stub);
        register_method(CallManager_adaptor, playDTMF, _playDTMF_stub);
        register_method(CallManager_adaptor, startTone, _startTone_stub);
        register_method(CallManager_adaptor, setVolume, _setVolume_stub);
        register_method(CallManager_adaptor, getVolume, _getVolume_stub);
        register_method(CallManager_adaptor, joinParticipant, _joinParticipant_stub);
        register_method(CallManager_adaptor, createConfFromParticipantList, _createConfFromParticipantList_stub);
        register_method(CallManager_adaptor, addParticipant, _addParticipant_stub);
        register_method(CallManager_adaptor, addMainParticipant, _addMainParticipant_stub);
        register_method(CallManager_adaptor, detachParticipant, _detachParticipant_stub);
        register_method(CallManager_adaptor, joinConference, _joinConference_stub);
        register_method(CallManager_adaptor, getConferenceDetails, _getConferenceDetails_stub);
        register_method(CallManager_adaptor, getConferenceList, _getConferenceList_stub);
        register_method(CallManager_adaptor, getConferenceId, _getConferenceId_stub);
        register_method(CallManager_adaptor, setRecording, _setRecording_stub);
        register_method(CallManager_adaptor, getIsRecording, _getIsRecording_stub);
        register_method(CallManager_adaptor, recordPlaybackSeek, _recordPlaybackSeek_stub);
        register_method(CallManager_adaptor, getCallDetails, _getCallDetails_stub);
        register_method(CallManager_adaptor, getCallList, _getCallList_stub);
        register_method(CallManager_adaptor, getCurrentAudioCodecName, _getCurrentAudioCodecName_stub);
        register_method(CallManager_adaptor, sendTextMessage, _sendTextMessage_stub);
        register_method(CallManager_adaptor, getParticipantList, _getParticipantList_stub);
        register_method(CallManager_adaptor, holdConference, _holdConference_stub);
        register_method(CallManager_adaptor, unholdConference, _unholdConference_stub);
        register_method(CallManager_adaptor, startRecordedFilePlayback, _startRecordedFilePlayback_stub);
        register_method(CallManager_adaptor, stopRecordedFilePlayback, _stopRecordedFilePlayback_stub);
        register_method(CallManager_adaptor, setSASVerified, _setSASVerified_stub);
        register_method(CallManager_adaptor, resetSASVerified, _resetSASVerified_stub);
        register_method(CallManager_adaptor, setConfirmGoClear, _setConfirmGoClear_stub);
        register_method(CallManager_adaptor, requestGoClear, _requestGoClear_stub);
        register_method(CallManager_adaptor, acceptEnrollment, _acceptEnrollment_stub);
    }

    ::DBus::IntrospectedInterface *const introspect() const 
    {
        static ::DBus::IntrospectedArgument placeCall_args[] = 
        {
            { "accountID", "s", true },
            { "callID", "s", true },
            { "to", "s", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument placeCallFirstAccount_args[] = 
        {
            { "callID", "s", true },
            { "to", "s", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument refuse_args[] = 
        {
            { "callID", "s", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument accept_args[] = 
        {
            { "callID", "s", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument hangUp_args[] = 
        {
            { "callID", "s", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument hangUpConference_args[] = 
        {
            { "confID", "s", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument hold_args[] = 
        {
            { "callID", "s", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument unhold_args[] = 
        {
            { "callID", "s", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument transfer_args[] = 
        {
            { "callID", "s", true },
            { "to", "s", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument attendedTransfer_args[] = 
        {
            { "transferID", "s", true },
            { "targetID", "s", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument playDTMF_args[] = 
        {
            { "key", "s", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument startTone_args[] = 
        {
            { "start", "i", true },
            { "type", "i", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument setVolume_args[] = 
        {
            { "device", "s", true },
            { "value", "d", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument getVolume_args[] = 
        {
            { "device", "s", true },
            { "value", "d", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument joinParticipant_args[] = 
        {
            { "sel_callID", "s", true },
            { "drag_callID", "s", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument createConfFromParticipantList_args[] = 
        {
            { "participants", "as", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument addParticipant_args[] = 
        {
            { "callID", "s", true },
            { "confID", "s", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument addMainParticipant_args[] = 
        {
            { "confID", "s", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument detachParticipant_args[] = 
        {
            { "callID", "s", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument joinConference_args[] = 
        {
            { "sel_confID", "s", true },
            { "drag_confID", "s", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument getConferenceDetails_args[] = 
        {
            { "callID", "s", true },
            { "infos", "a{ss}", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument getConferenceList_args[] = 
        {
            { "list", "as", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument getConferenceId_args[] = 
        {
            { "callID", "s", true },
            { "confID", "s", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument setRecording_args[] = 
        {
            { "callID", "s", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument getIsRecording_args[] = 
        {
            { "callID", "s", true },
            { "isRecording", "b", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument recordPlaybackSeek_args[] = 
        {
            { "value", "d", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument getCallDetails_args[] = 
        {
            { "callID", "s", true },
            { "infos", "a{ss}", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument getCallList_args[] = 
        {
            { "list", "as", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument getCurrentAudioCodecName_args[] = 
        {
            { "callID", "s", true },
            { "codecName", "s", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument sendTextMessage_args[] = 
        {
            { "callID", "s", true },
            { "message", "s", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument getParticipantList_args[] = 
        {
            { "confID", "s", true },
            { "list", "as", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument holdConference_args[] = 
        {
            { "confID", "s", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument unholdConference_args[] = 
        {
            { "confID", "s", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument startRecordedFilePlayback_args[] = 
        {
            { "filepath", "s", true },
            { "result", "b", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument stopRecordedFilePlayback_args[] = 
        {
            { "filepath", "s", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument setSASVerified_args[] = 
        {
            { "callID", "s", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument resetSASVerified_args[] = 
        {
            { "callID", "s", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument setConfirmGoClear_args[] = 
        {
            { "callID", "s", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument requestGoClear_args[] = 
        {
            { "callID", "s", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument acceptEnrollment_args[] = 
        {
            { "callID", "s", true },
            { "accepted", "b", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument recordPlaybackFilepath_args[] = 
        {
            { "callID", "s", false },
            { "filepath", "s", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument recordPlaybackStopped_args[] = 
        {
            { "filepath", "s", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument updatePlaybackScale_args[] = 
        {
            { "position", "i", false },
            { "size", "i", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument newCallCreated_args[] = 
        {
            { "accountID", "s", false },
            { "callID", "s", false },
            { "to", "s", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument incomingCall_args[] = 
        {
            { "accountID", "s", false },
            { "callID", "s", false },
            { "from", "s", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument incomingMessage_args[] = 
        {
            { "callID", "s", false },
            { "from", "s", false },
            { "message", "s", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument callStateChanged_args[] = 
        {
            { "callID", "s", false },
            { "state", "s", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument conferenceChanged_args[] = 
        {
            { "confID", "s", false },
            { "state", "s", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument conferenceCreated_args[] = 
        {
            { "confID", "s", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument conferenceRemoved_args[] = 
        {
            { "confID", "s", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument sipCallStateChanged_args[] = 
        {
            { "callID", "s", false },
            { "state", "s", false },
            { "code", "i", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument registrationStateChanged_args[] = 
        {
            { "accountID", "s", false },
            { "state", "s", false },
            { "code", "i", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument voiceMailNotify_args[] = 
        {
            { "accountID", "s", false },
            { "count", "i", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument volumeChanged_args[] = 
        {
            { "device", "s", false },
            { "value", "d", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument transferSucceeded_args[] = 
        {
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument transferFailed_args[] = 
        {
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument secureSdesOn_args[] = 
        {
            { "callID", "s", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument secureSdesOff_args[] = 
        {
            { "callID", "s", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument secureZrtpOn_args[] = 
        {
            { "callID", "s", false },
            { "cipher", "s", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument secureZrtpOff_args[] = 
        {
            { "callID", "s", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument confirmGoClear_args[] = 
        {
            { "callID", "s", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument zrtpNegotiationFailed_args[] = 
        {
            { "callID", "s", false },
            { "reason", "s", false },
            { "severity", "s", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument zrtpNotSuppOther_args[] = 
        {
            { "callID", "s", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument showSAS_args[] = 
        {
            { "callID", "s", false },
            { "sas", "s", false },
            { "verified", "b", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedMethod CallManager_adaptor_methods[] = 
        {
            { "placeCall", placeCall_args },
            { "placeCallFirstAccount", placeCallFirstAccount_args },
            { "refuse", refuse_args },
            { "accept", accept_args },
            { "hangUp", hangUp_args },
            { "hangUpConference", hangUpConference_args },
            { "hold", hold_args },
            { "unhold", unhold_args },
            { "transfer", transfer_args },
            { "attendedTransfer", attendedTransfer_args },
            { "playDTMF", playDTMF_args },
            { "startTone", startTone_args },
            { "setVolume", setVolume_args },
            { "getVolume", getVolume_args },
            { "joinParticipant", joinParticipant_args },
            { "createConfFromParticipantList", createConfFromParticipantList_args },
            { "addParticipant", addParticipant_args },
            { "addMainParticipant", addMainParticipant_args },
            { "detachParticipant", detachParticipant_args },
            { "joinConference", joinConference_args },
            { "getConferenceDetails", getConferenceDetails_args },
            { "getConferenceList", getConferenceList_args },
            { "getConferenceId", getConferenceId_args },
            { "setRecording", setRecording_args },
            { "getIsRecording", getIsRecording_args },
            { "recordPlaybackSeek", recordPlaybackSeek_args },
            { "getCallDetails", getCallDetails_args },
            { "getCallList", getCallList_args },
            { "getCurrentAudioCodecName", getCurrentAudioCodecName_args },
            { "sendTextMessage", sendTextMessage_args },
            { "getParticipantList", getParticipantList_args },
            { "holdConference", holdConference_args },
            { "unholdConference", unholdConference_args },
            { "startRecordedFilePlayback", startRecordedFilePlayback_args },
            { "stopRecordedFilePlayback", stopRecordedFilePlayback_args },
            { "setSASVerified", setSASVerified_args },
            { "resetSASVerified", resetSASVerified_args },
            { "setConfirmGoClear", setConfirmGoClear_args },
            { "requestGoClear", requestGoClear_args },
            { "acceptEnrollment", acceptEnrollment_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedMethod CallManager_adaptor_signals[] = 
        {
            { "recordPlaybackFilepath", recordPlaybackFilepath_args },
            { "recordPlaybackStopped", recordPlaybackStopped_args },
            { "updatePlaybackScale", updatePlaybackScale_args },
            { "newCallCreated", newCallCreated_args },
            { "incomingCall", incomingCall_args },
            { "incomingMessage", incomingMessage_args },
            { "callStateChanged", callStateChanged_args },
            { "conferenceChanged", conferenceChanged_args },
            { "conferenceCreated", conferenceCreated_args },
            { "conferenceRemoved", conferenceRemoved_args },
            { "sipCallStateChanged", sipCallStateChanged_args },
            { "registrationStateChanged", registrationStateChanged_args },
            { "voiceMailNotify", voiceMailNotify_args },
            { "volumeChanged", volumeChanged_args },
            { "transferSucceeded", transferSucceeded_args },
            { "transferFailed", transferFailed_args },
            { "secureSdesOn", secureSdesOn_args },
            { "secureSdesOff", secureSdesOff_args },
            { "secureZrtpOn", secureZrtpOn_args },
            { "secureZrtpOff", secureZrtpOff_args },
            { "confirmGoClear", confirmGoClear_args },
            { "zrtpNegotiationFailed", zrtpNegotiationFailed_args },
            { "zrtpNotSuppOther", zrtpNotSuppOther_args },
            { "showSAS", showSAS_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedProperty CallManager_adaptor_properties[] = 
        {
            { 0, 0, 0, 0 }
        };
        static ::DBus::IntrospectedInterface CallManager_adaptor_interface = 
        {
            "org.sflphone.SFLphone.CallManager",
            CallManager_adaptor_methods,
            CallManager_adaptor_signals,
            CallManager_adaptor_properties
        };
        return &CallManager_adaptor_interface;
    }

public:

    /* properties exposed by this interface, use
     * property() and property(value) to get and set a particular property
     */

public:

    /* methods exported by this interface,
     * you will have to implement them in your ObjectAdaptor
     */
    virtual void placeCall(const std::string& accountID, const std::string& callID, const std::string& to) = 0;
    virtual void placeCallFirstAccount(const std::string& callID, const std::string& to) = 0;
    virtual void refuse(const std::string& callID) = 0;
    virtual void accept(const std::string& callID) = 0;
    virtual void hangUp(const std::string& callID) = 0;
    virtual void hangUpConference(const std::string& confID) = 0;
    virtual void hold(const std::string& callID) = 0;
    virtual void unhold(const std::string& callID) = 0;
    virtual void transfer(const std::string& callID, const std::string& to) = 0;
    virtual void attendedTransfer(const std::string& transferID, const std::string& targetID) = 0;
    virtual void playDTMF(const std::string& key) = 0;
    virtual void startTone(const int32_t& start, const int32_t& type) = 0;
    virtual void setVolume(const std::string& device, const double& value) = 0;
    virtual double getVolume(const std::string& device) = 0;
    virtual void joinParticipant(const std::string& sel_callID, const std::string& drag_callID) = 0;
    virtual void createConfFromParticipantList(const std::vector< std::string >& participants) = 0;
    virtual void addParticipant(const std::string& callID, const std::string& confID) = 0;
    virtual void addMainParticipant(const std::string& confID) = 0;
    virtual void detachParticipant(const std::string& callID) = 0;
    virtual void joinConference(const std::string& sel_confID, const std::string& drag_confID) = 0;
    virtual std::map< std::string, std::string > getConferenceDetails(const std::string& callID) = 0;
    virtual std::vector< std::string > getConferenceList() = 0;
    virtual std::string getConferenceId(const std::string& callID) = 0;
    virtual void setRecording(const std::string& callID) = 0;
    virtual bool getIsRecording(const std::string& callID) = 0;
    virtual void recordPlaybackSeek(const double& value) = 0;
    virtual std::map< std::string, std::string > getCallDetails(const std::string& callID) = 0;
    virtual std::vector< std::string > getCallList() = 0;
    virtual std::string getCurrentAudioCodecName(const std::string& callID) = 0;
    virtual void sendTextMessage(const std::string& callID, const std::string& message) = 0;
    virtual std::vector< std::string > getParticipantList(const std::string& confID) = 0;
    virtual void holdConference(const std::string& confID) = 0;
    virtual void unholdConference(const std::string& confID) = 0;
    virtual bool startRecordedFilePlayback(const std::string& filepath) = 0;
    virtual void stopRecordedFilePlayback(const std::string& filepath) = 0;
    virtual void setSASVerified(const std::string& callID) = 0;
    virtual void resetSASVerified(const std::string& callID) = 0;
    virtual void setConfirmGoClear(const std::string& callID) = 0;
    virtual void requestGoClear(const std::string& callID) = 0;
    virtual void acceptEnrollment(const std::string& callID, const bool& accepted) = 0;

public:

    /* signal emitters for this interface
     */
    void recordPlaybackFilepath(const std::string& arg1, const std::string& arg2)
    {
        ::DBus::SignalMessage sig("recordPlaybackFilepath");
        ::DBus::MessageIter wi = sig.writer();
        wi << arg1;
        wi << arg2;
        emit_signal(sig);
    }
    void recordPlaybackStopped(const std::string& arg1)
    {
        ::DBus::SignalMessage sig("recordPlaybackStopped");
        ::DBus::MessageIter wi = sig.writer();
        wi << arg1;
        emit_signal(sig);
    }
    void updatePlaybackScale(const int32_t& arg1, const int32_t& arg2)
    {
        ::DBus::SignalMessage sig("updatePlaybackScale");
        ::DBus::MessageIter wi = sig.writer();
        wi << arg1;
        wi << arg2;
        emit_signal(sig);
    }
    void newCallCreated(const std::string& arg1, const std::string& arg2, const std::string& arg3)
    {
        ::DBus::SignalMessage sig("newCallCreated");
        ::DBus::MessageIter wi = sig.writer();
        wi << arg1;
        wi << arg2;
        wi << arg3;
        emit_signal(sig);
    }
    void incomingCall(const std::string& arg1, const std::string& arg2, const std::string& arg3)
    {
        ::DBus::SignalMessage sig("incomingCall");
        ::DBus::MessageIter wi = sig.writer();
        wi << arg1;
        wi << arg2;
        wi << arg3;
        emit_signal(sig);
    }
    void incomingMessage(const std::string& arg1, const std::string& arg2, const std::string& arg3)
    {
        ::DBus::SignalMessage sig("incomingMessage");
        ::DBus::MessageIter wi = sig.writer();
        wi << arg1;
        wi << arg2;
        wi << arg3;
        emit_signal(sig);
    }
    void callStateChanged(const std::string& arg1, const std::string& arg2)
    {
        ::DBus::SignalMessage sig("callStateChanged");
        ::DBus::MessageIter wi = sig.writer();
        wi << arg1;
        wi << arg2;
        emit_signal(sig);
    }
    void conferenceChanged(const std::string& arg1, const std::string& arg2)
    {
        ::DBus::SignalMessage sig("conferenceChanged");
        ::DBus::MessageIter wi = sig.writer();
        wi << arg1;
        wi << arg2;
        emit_signal(sig);
    }
    void conferenceCreated(const std::string& arg1)
    {
        ::DBus::SignalMessage sig("conferenceCreated");
        ::DBus::MessageIter wi = sig.writer();
        wi << arg1;
        emit_signal(sig);
    }
    void conferenceRemoved(const std::string& arg1)
    {
        ::DBus::SignalMessage sig("conferenceRemoved");
        ::DBus::MessageIter wi = sig.writer();
        wi << arg1;
        emit_signal(sig);
    }
    void sipCallStateChanged(const std::string& arg1, const std::string& arg2, const int32_t& arg3)
    {
        ::DBus::SignalMessage sig("sipCallStateChanged");
        ::DBus::MessageIter wi = sig.writer();
        wi << arg1;
        wi << arg2;
        wi << arg3;
        emit_signal(sig);
    }
    void registrationStateChanged(const std::string& arg1, const std::string& arg2, const int32_t& arg3)
    {
        ::DBus::SignalMessage sig("registrationStateChanged");
        ::DBus::MessageIter wi = sig.writer();
        wi << arg1;
        wi << arg2;
        wi << arg3;
        emit_signal(sig);
    }
    void voiceMailNotify(const std::string& arg1, const int32_t& arg2)
    {
        ::DBus::SignalMessage sig("voiceMailNotify");
        ::DBus::MessageIter wi = sig.writer();
        wi << arg1;
        wi << arg2;
        emit_signal(sig);
    }
    void volumeChanged(const std::string& arg1, const double& arg2)
    {
        ::DBus::SignalMessage sig("volumeChanged");
        ::DBus::MessageIter wi = sig.writer();
        wi << arg1;
        wi << arg2;
        emit_signal(sig);
    }
    void transferSucceeded()
    {
        ::DBus::SignalMessage sig("transferSucceeded");
        emit_signal(sig);
    }
    void transferFailed()
    {
        ::DBus::SignalMessage sig("transferFailed");
        emit_signal(sig);
    }
    void secureSdesOn(const std::string& arg1)
    {
        ::DBus::SignalMessage sig("secureSdesOn");
        ::DBus::MessageIter wi = sig.writer();
        wi << arg1;
        emit_signal(sig);
    }
    void secureSdesOff(const std::string& arg1)
    {
        ::DBus::SignalMessage sig("secureSdesOff");
        ::DBus::MessageIter wi = sig.writer();
        wi << arg1;
        emit_signal(sig);
    }
    void secureZrtpOn(const std::string& arg1, const std::string& arg2)
    {
        ::DBus::SignalMessage sig("secureZrtpOn");
        ::DBus::MessageIter wi = sig.writer();
        wi << arg1;
        wi << arg2;
        emit_signal(sig);
    }
    void secureZrtpOff(const std::string& arg1)
    {
        ::DBus::SignalMessage sig("secureZrtpOff");
        ::DBus::MessageIter wi = sig.writer();
        wi << arg1;
        emit_signal(sig);
    }
    void confirmGoClear(const std::string& arg1)
    {
        ::DBus::SignalMessage sig("confirmGoClear");
        ::DBus::MessageIter wi = sig.writer();
        wi << arg1;
        emit_signal(sig);
    }
    void zrtpNegotiationFailed(const std::string& arg1, const std::string& arg2, const std::string& arg3)
    {
        ::DBus::SignalMessage sig("zrtpNegotiationFailed");
        ::DBus::MessageIter wi = sig.writer();
        wi << arg1;
        wi << arg2;
        wi << arg3;
        emit_signal(sig);
    }
    void zrtpNotSuppOther(const std::string& arg1)
    {
        ::DBus::SignalMessage sig("zrtpNotSuppOther");
        ::DBus::MessageIter wi = sig.writer();
        wi << arg1;
        emit_signal(sig);
    }
    void showSAS(const std::string& arg1, const std::string& arg2, const bool& arg3)
    {
        ::DBus::SignalMessage sig("showSAS");
        ::DBus::MessageIter wi = sig.writer();
        wi << arg1;
        wi << arg2;
        wi << arg3;
        emit_signal(sig);
    }

private:

    /* unmarshalers (to unpack the DBus message before calling the actual interface method)
     */
    ::DBus::Message _placeCall_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        std::string argin2; ri >> argin2;
        std::string argin3; ri >> argin3;
        placeCall(argin1, argin2, argin3);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _placeCallFirstAccount_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        std::string argin2; ri >> argin2;
        placeCallFirstAccount(argin1, argin2);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _refuse_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        refuse(argin1);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _accept_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        accept(argin1);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _hangUp_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        hangUp(argin1);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _hangUpConference_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        hangUpConference(argin1);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _hold_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        hold(argin1);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _unhold_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        unhold(argin1);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _transfer_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        std::string argin2; ri >> argin2;
        transfer(argin1, argin2);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _attendedTransfer_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        std::string argin2; ri >> argin2;
        attendedTransfer(argin1, argin2);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _playDTMF_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        playDTMF(argin1);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _startTone_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        int32_t argin1; ri >> argin1;
        int32_t argin2; ri >> argin2;
        startTone(argin1, argin2);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _setVolume_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        double argin2; ri >> argin2;
        setVolume(argin1, argin2);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _getVolume_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        double argout1 = getVolume(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _joinParticipant_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        std::string argin2; ri >> argin2;
        joinParticipant(argin1, argin2);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _createConfFromParticipantList_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< std::string > argin1; ri >> argin1;
        createConfFromParticipantList(argin1);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _addParticipant_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        std::string argin2; ri >> argin2;
        addParticipant(argin1, argin2);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _addMainParticipant_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        addMainParticipant(argin1);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _detachParticipant_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        detachParticipant(argin1);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _joinConference_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        std::string argin2; ri >> argin2;
        joinConference(argin1, argin2);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _getConferenceDetails_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        std::map< std::string, std::string > argout1 = getConferenceDetails(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _getConferenceList_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< std::string > argout1 = getConferenceList();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _getConferenceId_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        std::string argout1 = getConferenceId(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _setRecording_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        setRecording(argin1);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _getIsRecording_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        bool argout1 = getIsRecording(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _recordPlaybackSeek_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        double argin1; ri >> argin1;
        recordPlaybackSeek(argin1);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _getCallDetails_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        std::map< std::string, std::string > argout1 = getCallDetails(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _getCallList_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< std::string > argout1 = getCallList();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _getCurrentAudioCodecName_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        std::string argout1 = getCurrentAudioCodecName(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _sendTextMessage_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        std::string argin2; ri >> argin2;
        sendTextMessage(argin1, argin2);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _getParticipantList_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        std::vector< std::string > argout1 = getParticipantList(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _holdConference_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        holdConference(argin1);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _unholdConference_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        unholdConference(argin1);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _startRecordedFilePlayback_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        bool argout1 = startRecordedFilePlayback(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _stopRecordedFilePlayback_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        stopRecordedFilePlayback(argin1);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _setSASVerified_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        setSASVerified(argin1);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _resetSASVerified_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        resetSASVerified(argin1);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _setConfirmGoClear_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        setConfirmGoClear(argin1);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _requestGoClear_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        requestGoClear(argin1);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _acceptEnrollment_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        bool argin2; ri >> argin2;
        acceptEnrollment(argin1, argin2);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
};

} } } 
#endif //__dbusxx__callmanager_glue_h__ADAPTOR_MARSHAL_H
